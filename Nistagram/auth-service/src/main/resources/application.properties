eureka.client.service-url.defaultZone=http://${REGISTRY_HOST:localhost}:${REGISTRY_PORT:8761}/eureka/
eureka.client.service-url.healthcheck.enabled=true
eureka.instance.prefer-ip-address=true

spring.application.name = auth-service
server.ssl.key-store-type=JKS
server.ssl.key-store=src/main/resources/ftn.jks
server.ssl.key-store-password=password
server.ssl.key-alias=www.ftn.prni.com
server.ssl.enabled=true
server.port = 8081
security.require-ssl=true

#Spring DataSource drajver koji će se koristiti za komunikaciju aplikacije sa bazom
spring.datasource.driverClassName=org.postgresql.Driver

#Navodi se baza koja se koristi
spring.datasource.platform=postgres

#Navodi se URL do baze koja je pokrenuta u lokalu na podrazumevanom portu 5432 i na serveru je kreirana šema baze pod nazivom "jpa"
#https://www.pgadmin.org/docs/pgadmin4/4.14/schema_dialog.html (ako koristimo Hibernate za kreiranje tabela, SQL deo sa linka nije potreban)
spring.datasource.url=${DB_PATH:jdbc:postgresql://localhost:5432/users}

#Navode se kredencijali za konekciju na server baze
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASS:1111}

#Umesto da sami pišemo SQL skriptu za kreiranje tabela u bazi, Hibernate kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom dropuje ih (create-drop)
#https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
#Ako želimo sami da kreiramo skriptu za kreiranje tabela potrebno je u src/main/resources folderu kreirati i popuniti fajl pod nazivom schema.sql koji će Spring Boot automatski pokrenuti pri pokretanju aplikacije
spring.jpa.hibernate.ddl-auto = ${DB_AUTO_DDL:create-drop}

#Hibernate SQL upiti se ispisuju na IDE konzoli
spring.jpa.show-sql = true

#formatira ispis SQL upita koje Hibernate pravi ka bazi na IDE konzoli
spring.jpa.properties.hibernate.format_sql=true

#https://docs.spring.io/spring-boot/docs/2.1.0.M1/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc
spring.datasource.initialization-mode=always

#https://stackoverflow.com/questions/43905119/postgres-error-method-org-postgresql-jdbc-pgconnection-createclob-is-not-imple
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Hibernate optimizacija SQL upita za Postgres bazu
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

spring.rabbitmq.host=${RABBIT_MQ_HOST:localhost}
spring.rabbitmq.port=${RABBIT_MQ_PORT:5672}
spring.rabbitmq.username=${RABBIT_MQ_USERNAME:guest}
spring.rabbitmq.password=${RABBIT_MQ_PASSWORD:guest}

fanout.auth=AUTH_FANOUT_EVENTS
queue.auth-activity-profile=AUTH_ACTIVITY_PROFILE_EVENTS
queue.auth-publishing-profile=AUTH_PUBLISHING_PROFILE_EVENTS
queue.auth-following-profile=AUTH_FOLLOWING_PROFILE_EVENTS
queue.auth-story-profile=AUTH_STORY_PROFILE_EVENTS

queue.profile-canceled=PROFILE_CANCELED_EVENT
queue.profile-done=PROFILE_DONE_EVENT

#Mail configuration  student123ftn@gmail.com  student_123
spring.mail.host = smtp.gmail.com
spring.mail.username = isa.user.test@gmail.com
spring.mail.password = isauser55
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable = true
